// Code generated by mockery v2.32.4. DO NOT EDIT.

package genre

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockGenreRepository is an autogenerated mock type for the GenreRepository type
type MockGenreRepository struct {
	mock.Mock
}

type MockGenreRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGenreRepository) EXPECT() *MockGenreRepository_Expecter {
	return &MockGenreRepository_Expecter{mock: &_m.Mock}
}

// CreateGenreForUser provides a mock function with given fields: ctx, genre, userID
func (_m *MockGenreRepository) CreateGenreForUser(ctx context.Context, genre GenreInput, userID string) (Genre, error) {
	ret := _m.Called(ctx, genre, userID)

	var r0 Genre
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GenreInput, string) (Genre, error)); ok {
		return rf(ctx, genre, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GenreInput, string) Genre); ok {
		r0 = rf(ctx, genre, userID)
	} else {
		r0 = ret.Get(0).(Genre)
	}

	if rf, ok := ret.Get(1).(func(context.Context, GenreInput, string) error); ok {
		r1 = rf(ctx, genre, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGenreRepository_CreateGenreForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGenreForUser'
type MockGenreRepository_CreateGenreForUser_Call struct {
	*mock.Call
}

// CreateGenreForUser is a helper method to define mock.On call
//   - ctx context.Context
//   - genre GenreInput
//   - userID string
func (_e *MockGenreRepository_Expecter) CreateGenreForUser(ctx interface{}, genre interface{}, userID interface{}) *MockGenreRepository_CreateGenreForUser_Call {
	return &MockGenreRepository_CreateGenreForUser_Call{Call: _e.mock.On("CreateGenreForUser", ctx, genre, userID)}
}

func (_c *MockGenreRepository_CreateGenreForUser_Call) Run(run func(ctx context.Context, genre GenreInput, userID string)) *MockGenreRepository_CreateGenreForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GenreInput), args[2].(string))
	})
	return _c
}

func (_c *MockGenreRepository_CreateGenreForUser_Call) Return(_a0 Genre, _a1 error) *MockGenreRepository_CreateGenreForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGenreRepository_CreateGenreForUser_Call) RunAndReturn(run func(context.Context, GenreInput, string) (Genre, error)) *MockGenreRepository_CreateGenreForUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllForUser provides a mock function with given fields: ctx, userID
func (_m *MockGenreRepository) GetAllForUser(ctx context.Context, userID string) ([]Genre, error) {
	ret := _m.Called(ctx, userID)

	var r0 []Genre
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]Genre, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []Genre); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Genre)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGenreRepository_GetAllForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllForUser'
type MockGenreRepository_GetAllForUser_Call struct {
	*mock.Call
}

// GetAllForUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockGenreRepository_Expecter) GetAllForUser(ctx interface{}, userID interface{}) *MockGenreRepository_GetAllForUser_Call {
	return &MockGenreRepository_GetAllForUser_Call{Call: _e.mock.On("GetAllForUser", ctx, userID)}
}

func (_c *MockGenreRepository_GetAllForUser_Call) Run(run func(ctx context.Context, userID string)) *MockGenreRepository_GetAllForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGenreRepository_GetAllForUser_Call) Return(_a0 []Genre, _a1 error) *MockGenreRepository_GetAllForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGenreRepository_GetAllForUser_Call) RunAndReturn(run func(context.Context, string) ([]Genre, error)) *MockGenreRepository_GetAllForUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGenreRepository creates a new instance of MockGenreRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenreRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenreRepository {
	mock := &MockGenreRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
