package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"time"

	"github.com/dstreet/mogal/internal/graphql/model"
	"github.com/dstreet/mogal/internal/http"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.Authorization, error) {
	r.Logger.Info("authenticating user", "email", input.Email)

	u, err := r.Resolver.UserRepository.Login(ctx, input.Email, input.Password)
	if err != nil {
		r.Logger.Error("failed to authenticate user", "email", input.Email, "err", err)
		return nil, err
	}

	r.Logger.Info("successfully authenticatd user", "ID", u.ID)

	token, err := r.TokenProvider.CreateToken(u, time.Second*900)
	if err != nil {
		r.Logger.Error("failed to create token for user", "ID", u.ID, "err", err)
		return nil, err
	}

	r.Logger.Info("generated token for user", "ID", u.ID)

	return &model.Authorization{
		Token:     token,
		ExpiresIn: 900,
	}, nil
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.Authorization, error) {
	r.Logger.Info("registering new user", "email", input.Email)

	u, err := r.Resolver.UserRepository.Create(ctx, input.Email, input.Password)
	if err != nil {
		r.Logger.Error("failed to create user", "email", input.Email, "err", err)
		return nil, err
	}

	r.Logger.Debug("created user", "ID", u.ID)

	token, err := r.TokenProvider.CreateToken(u, time.Second*900)
	if err != nil {
		r.Logger.Error("failed to create token for user", "ID", u.ID, "err", err)
		return nil, err
	}

	r.Logger.Debug("generated token for user", "ID", u.ID)

	return &model.Authorization{
		Token:     token,
		ExpiresIn: 900,
	}, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context) (*model.Authorization, error) {
	r.Logger.Info("refreshing user token")
	user := http.UserForContext(ctx)
	if user == nil {
		return nil, http.ErrUnauthorized
	}

	token, err := r.TokenProvider.CreateToken(*user, time.Second*900)
	if err != nil {
		r.Logger.Error("failed to create token for user", "ID", user.ID, "err", err)
		return nil, err
	}

	r.Logger.Debug("generated token for user", "ID", user.ID)

	return &model.Authorization{
		Token:     token,
		ExpiresIn: 900,
	}, nil
}

// Hello is the resolver for the hello field.
func (r *queryResolver) Hello(ctx context.Context) (string, error) {
	return "hello, world", nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
