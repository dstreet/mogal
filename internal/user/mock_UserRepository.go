// Code generated by mockery v2.32.4. DO NOT EDIT.

package user

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, email, password
func (_m *MockUserRepository) Create(ctx context.Context, email string, password string) (User, error) {
	ret := _m.Called(ctx, email, password)

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (User, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) User); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *MockUserRepository_Expecter) Create(ctx interface{}, email interface{}, password interface{}) *MockUserRepository_Create_Call {
	return &MockUserRepository_Create_Call{Call: _e.mock.On("Create", ctx, email, password)}
}

func (_c *MockUserRepository_Create_Call) Run(run func(ctx context.Context, email string, password string)) *MockUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserRepository_Create_Call) Return(_a0 User, _a1 error) *MockUserRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_Create_Call) RunAndReturn(run func(context.Context, string, string) (User, error)) *MockUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, ID
func (_m *MockUserRepository) Delete(ctx context.Context, ID string) (User, error) {
	ret := _m.Called(ctx, ID)

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (User, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) User); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
func (_e *MockUserRepository_Expecter) Delete(ctx interface{}, ID interface{}) *MockUserRepository_Delete_Call {
	return &MockUserRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, ID)}
}

func (_c *MockUserRepository_Delete_Call) Run(run func(ctx context.Context, ID string)) *MockUserRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_Delete_Call) Return(_a0 User, _a1 error) *MockUserRepository_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_Delete_Call) RunAndReturn(run func(context.Context, string) (User, error)) *MockUserRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithID provides a mock function with given fields: ctx, ID
func (_m *MockUserRepository) GetWithID(ctx context.Context, ID string) (User, error) {
	ret := _m.Called(ctx, ID)

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (User, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) User); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithID'
type MockUserRepository_GetWithID_Call struct {
	*mock.Call
}

// GetWithID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
func (_e *MockUserRepository_Expecter) GetWithID(ctx interface{}, ID interface{}) *MockUserRepository_GetWithID_Call {
	return &MockUserRepository_GetWithID_Call{Call: _e.mock.On("GetWithID", ctx, ID)}
}

func (_c *MockUserRepository_GetWithID_Call) Run(run func(ctx context.Context, ID string)) *MockUserRepository_GetWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetWithID_Call) Return(_a0 User, _a1 error) *MockUserRepository_GetWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetWithID_Call) RunAndReturn(run func(context.Context, string) (User, error)) *MockUserRepository_GetWithID_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *MockUserRepository) Login(ctx context.Context, email string, password string) (User, error) {
	ret := _m.Called(ctx, email, password)

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (User, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) User); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserRepository_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *MockUserRepository_Expecter) Login(ctx interface{}, email interface{}, password interface{}) *MockUserRepository_Login_Call {
	return &MockUserRepository_Login_Call{Call: _e.mock.On("Login", ctx, email, password)}
}

func (_c *MockUserRepository_Login_Call) Run(run func(ctx context.Context, email string, password string)) *MockUserRepository_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserRepository_Login_Call) Return(_a0 User, _a1 error) *MockUserRepository_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_Login_Call) RunAndReturn(run func(context.Context, string, string) (User, error)) *MockUserRepository_Login_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
